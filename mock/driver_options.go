// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/machine/libmachine/drivers (interfaces: DriverOptions)
//
// Generated by this command:
//
//	mockgen -destination mock/driver_options.go -package mock github.com/rancher/machine/libmachine/drivers DriverOptions
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDriverOptions is a mock of DriverOptions interface.
type MockDriverOptions struct {
	ctrl     *gomock.Controller
	recorder *MockDriverOptionsMockRecorder
	isgomock struct{}
}

// MockDriverOptionsMockRecorder is the mock recorder for MockDriverOptions.
type MockDriverOptionsMockRecorder struct {
	mock *MockDriverOptions
}

// NewMockDriverOptions creates a new mock instance.
func NewMockDriverOptions(ctrl *gomock.Controller) *MockDriverOptions {
	mock := &MockDriverOptions{ctrl: ctrl}
	mock.recorder = &MockDriverOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverOptions) EXPECT() *MockDriverOptionsMockRecorder {
	return m.recorder
}

// Bool mocks base method.
func (m *MockDriverOptions) Bool(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bool indicates an expected call of Bool.
func (mr *MockDriverOptionsMockRecorder) Bool(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockDriverOptions)(nil).Bool), key)
}

// Int mocks base method.
func (m *MockDriverOptions) Int(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockDriverOptionsMockRecorder) Int(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockDriverOptions)(nil).Int), key)
}

// String mocks base method.
func (m *MockDriverOptions) String(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDriverOptionsMockRecorder) String(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDriverOptions)(nil).String), key)
}

// StringSlice mocks base method.
func (m *MockDriverOptions) StringSlice(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringSlice", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// StringSlice indicates an expected call of StringSlice.
func (mr *MockDriverOptionsMockRecorder) StringSlice(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringSlice", reflect.TypeOf((*MockDriverOptions)(nil).StringSlice), key)
}
